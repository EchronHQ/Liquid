@use "mixins";
@use "../variables";

@mixin grid(
  $breakpoints:('sm': variables.$breakpoint-sm, 'md':variables.$breakpoint-md, 'lg':variables.$breakpoint-lg),
  $gaps: [1, 4, 8, 16, 12],
  $spans:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
) {


  $gapBase: 0.4rem;

  /** 1rem = 1x body font size (16px) */
  //$gaps: 1, 4, 8, 16, 12;
  //
  //$spans: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
  //
  //$breakpoints: ('sm': variables.$breakpoint-sm, 'md':variables.$breakpoint-md, 'lg':variables.$breakpoint-lg);


  .grid {
    display: grid;

    grid-auto-columns: 1fr;
    grid-auto-flow: row;

    grid-template-columns: repeat(12, minmax(0, 1fr));
    @include mixins.debug('orange');
    //border: 2px dashed orange;
    &.reverse {
      direction: rtl;

      div {
        direction: ltr;
      }
    }
  }

  .grid-rows-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .grid-rows-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  @each $span in $spans {
    .col--#{$span} {
      grid-column: span $span/span $span;
    }
  }


  @each $gap in $gaps {
    .gap--#{$gap} {
      gap: $gapBase * $gap;
    }
  }

  @each $breakpoint, $pixels in $breakpoints {
    @media only screen and (min-width: $pixels) {
      @each $span in $spans {
        .#{$breakpoint}\:col--#{$span} {
          grid-column: span $span/span $span;
        }
      };
      @each $gap in $gaps {
        .#{$breakpoint}\:gap--#{$gap} {
          gap: $gapBase * $gap;
        }
      };
    }
  }

  //@media only screen and (min-width: $breakpoint-sm) {
  //  @each $span in $spans {
  //    .sm\:col--#{$span} {
  //      grid-column: span $span/span $span;
  //    }
  //  };
  //  @each $gap in $gaps {
  //    .sm\:gap--#{$gap} {
  //      gap: $gapBase * $gap;
  //    }
  //  };
  //}

}
